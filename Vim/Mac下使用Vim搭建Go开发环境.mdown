这是一篇介绍如何在Mac环境下，使用Vim搭建Go IDE的教程。
===============================================

# 索引 #
* 安装Vundle
* 安装vim-go
* 安装molokai主题
* 安装YouCompleteMe
* 安装UltiSnips
* 安装Tagbar

#### 一. 安装Vundle ####
##### 1. 下载Vundle:#####

	$ git clone https://github.com/gmarik/Vundle.vim.git ~/.vim/bundle/Vundle.vim

##### 2. 配置Vundle: #####
> 增加以下配置到`.vimrc`中：

	set nocompatible              " be iMproved, required
	filetype off                  " required

	" set the runtime path to include Vundle and initialize
	set rtp+=~/.vim/bundle/Vundle.vim
	call vundle#begin()
	" alternatively, pass a path where Vundle should install plugins
	"call vundle#begin('~/some/path/here')

	" let Vundle manage Vundle, required
	Plugin 'gmarik/Vundle.vim'

	" All of your Plugins must be added before the following line
	call vundle#end()            " required
	filetype plugin indent on    " required

##### 3. 安装Vundle: #####
> 启动Vim，并运行：`:PluginInstall` 
> 或终端中执行命令：`vim +PluginInstall +qall`

参考：
[Help Maintain Vundle](https://github.com/gmarik/Vundle.vim "Help Maintain Vundle")

#### 二. 安装vim-go ####
##### 1. 安装vim-go: #####
> 我们可以直接使用git clone `vim-go`到`~/.vim/bundle`目录，如下：

	$ git clone https://github.com/fatih/vim-go.git ~/.vim/bundle

> 也可以使用Vundle安装，添加以下配置到`.vimrc`中，并重新启动Vim执行`:PluginInstall`完成安装

	Plugin 'fatih/vim-go'
> **注意:**
> 该行配置添加到`.vimrc`中`Plugin 'gmarik/Vundle.vim'` 这行下面

##### 2. 安装vim-go依赖命令工具: #####
> 启动Vim，执行命令：`:GoInstallBinaries` 
> vim-go插件将自动下载并安装这些命令：`gocode` `godef` `goimports` `golint` `gorename` `gotags` `oracle` `errcheck`

> **注意:**
> 1. 需要翻墙
> 2. 必须安装git和hg
> 3. 如果配置了`$GOBIN`环境变量，这些命令将下载并安装到该目录，否则将安装到`$GOPATH/bin`目录中

##### 3. 配置vim-go: #####
> 将下列配置添加到`.vimrc`中

	" 设置语法高亮
	syntax on

	" vim-go settings
	au FileType go nmap <Leader>s <Plug>(go-implements)
	au FileType go nmap <Leader>i <Plug>(go-info)
	au FileType go nmap <Leader>gd <Plug>(go-doc)
	au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
	au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
	au FileType go nmap <leader>r <Plug>(go-run)
	au FileType go nmap <leader>b <Plug>(go-build)
	au FileType go nmap <leader>t <Plug>(go-test)
	au FileType go nmap <leader>c <Plug>(go-coverage)
	au FileType go nmap <Leader>ds <Plug>(go-def-split)
	au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
	au FileType go nmap <Leader>dt <Plug>(go-def-tab)
	au FileType go nmap <Leader>e <Plug>(go-rename)

	" Syntax-highlighting for Functions, Methods and Structs
	let g:go_highlight_functions = 1
	let g:go_highlight_methods   = 1
	let g:go_highlight_structs   = 1

> **注意:**
> 必须添加`syntax on`，否则无法高亮

参考：
[vim-go](https://github.com/fatih/vim-go "vim-go")

#### 三. 安装molokai主题 ####
> 在`.vim`目录下创建`colors`目录，下载molokai.vim到colors目录下：

	mkdir ~/.vim/colors
	cd ~ & git clone https://github.com/fatih/molokai.git
	cp molokai/colors/molokai.vim ~/.vim/colors/
	rm -rf molokai

> 在`.vimrc`中添加一行配置：
	
	colorscheme molokai

> **注意:**
> 修改后和Sublime text 3还是有一些差距，我们可以修改终端的字体和字号：*Menlo Regular 12pt.*
> 如下图:
![VIM-Go](hello.png)

#### 四. 安装YouCompleteMe自动补全 ####
##### 1. 安装YouCompleteMe: #####
> 由于gocode提供的补全并非实时跟随的那种补齐，需要使用快捷键Ctrl+X, Ctrl+O，Vim 才会弹出补齐提示下拉框，所以我们选择YouCompleteMe来提供实时跟随补齐
> 和`vim-go`一样，我们使用Vundle安装，添加以下配置到`.vimrc`中，并重新启动Vim执行`:PluginInstall`完成安装

	" 自动完成插件
	Plugin 'Valloric/YouCompleteMe'

##### 2. 编译YouCompleteMe: #####
> 和其他Vim插件不同，YouCompleteMe需要编译安装(详细的细节可以查看[YouCompleteMe](https://github.com/Valloric/YouCompleteMe "YouCompleteMe"))，命令如下：

	cd ~/.vim/bundle/YouCompleteMe
	git submodule update --init --recursive
	./install.sh

##### 3. 配置YouCompleteMe: #####
> 我们通过方向键来选择，通过Ctrl+Space来原地触发补齐提示，增加如下配置到`.vimrc`中

	" YouCompleteMe settings 
	let g:ycm_key_list_select_completion = ['', '']
	let g:ycm_key_list_previous_completion = ['', '']
	let g:ycm_key_invoke_completion = '<C-Space>'	

> 效果如下:
![YouCompleteMe](YouCompleteMe.png)
参考：
[YouCompleteMe](https://github.com/Valloric/YouCompleteMe "YouCompleteMe")

#### 五. 安装UltiSnips ####
##### 1. 安装UltiSnips: #####
> vim-go默认是用UltiSnips引擎插件，所以我们需要安装这个插件
> 添加以下配置到`.vimrc`中，并重新启动Vim执行`:PluginInstall`完成安装

	" Track the engine.
	Plugin 'SirVer/ultisnips'

	" Snippets are separated from the engine. Add this if you want them:
	Plugin 'honza/vim-snippets'

> vim-go的go snippet定义在这里 [go.snip](https://github.com/fatih/vim-go/blob/master/gosnippets/snippets/go.snip "go.snip")

##### 2. 配置UltiSnips: #####
> 由于UltiSnips快捷键和YouCompleteMe冲突，所以我们增加如下配置到 `.vimrc`中

	" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
	let g:UltiSnipsExpandTrigger="<tab>"
	let g:UltiSnipsJumpForwardTrigger="<c-b>"
	let g:UltiSnipsJumpBackwardTrigger="<c-z>"

> 效果如下:
![UltiSnips](UltiSnips.png)

参考：
[UltiSnips](https://github.com/SirVer/ultisnips "UltiSnips")

#### 六. 安装Tagbar ####
##### 1. 安装Tagbar: #####
> 依然和之前的其他插件一样，添加以下配置到`.vimrc`中，并重新启动Vim执行`:PluginInstall`完成安装

	" Tagbar: a class outline viewer for Vim
	Plugin 'majutsushi/tagbar'

> 由于Mac自带的ctags版本太低，所以我们需要升级下ctags，如下：

	brew install ctags

##### 2. 配置Tagbar: #####
> 我们使用F8键来开启关闭Tagbar，所以添加如下配置到`.vimrc`中：

	" Tagbar setting
	nmap <F8> :TagbarToggle<CR>
	let g:tagbar_type_go = {
	    \ 'ctagstype' : 'go',
	    \ 'kinds'     : [
	        \ 'p:package',
	        \ 'i:imports:1',
	        \ 'c:constants',
	        \ 'v:variables',
	        \ 't:types',
	        \ 'n:interfaces',
	        \ 'w:fields',
	        \ 'e:embedded',
	        \ 'm:methods',
	        \ 'r:constructor',
	        \ 'f:functions'
	    \ ],
	    \ 'sro' : '.',
	    \ 'kind2scope' : {
	        \ 't' : 'ctype',
	        \ 'n' : 'ntype'
	    \ },
	    \ 'scope2kind' : {
	        \ 'ctype' : 't',
	        \ 'ntype' : 'n'
	    \ },
	    \ 'ctagsbin'  : 'gotags',
	    \ 'ctagsargs' : '-sort -silent'
	    \ }

##### 3. Tagbar 基本使用: #####
> 编写代码的时候，在命令模式下按下F8，会看到右边出现了当前文件下的函数，结构体，接口等等
> 使用 Ctrl + W 切换右边窗口，上下移动光标，回车，即可到达指定的函数，结构体，接口等

> 效果如下:
![Tagbar](Tagbar.png)

参考：
[Tagbar](https://github.com/majutsushi/tagbar "Tagbar")

其他文献:
[Go development environment for Vim](http://blog.gopheracademy.com/vimgo-development-environment/ "Go development environment for Vim")
[Golang开发环境搭建-Vim篇](http://tonybai.com/2014/11/07/golang-development-environment-for-vim/ "Golang开发环境搭建-Vim篇")


